import sqlite3
import sys
import io
import os

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists('fragrantica_news.db'):
        print("‚úó –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python parse_fragrantica_news.py")
        return False
    
    print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
    
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É news
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='news'")
    if not cursor.fetchone():
        print("‚úó –¢–∞–±–ª–∏—Ü–∞ news –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        conn.close()
        return False
    
    print("‚úì –¢–∞–±–ª–∏—Ü–∞ news —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("PRAGMA table_info(news)")
    columns = {row[1] for row in cursor.fetchall()}
    
    required_columns = {'id', 'title', 'url', 'news_full', 'news_rewritten'}
    missing_columns = required_columns - columns
    
    if missing_columns:
        print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
        if 'news_full' in missing_columns:
            print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python add_full_news_column.py")
        if 'news_rewritten' in missing_columns:
            print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python add_rewritten_column.py")
        conn.close()
        return False
    
    print("‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    cursor.execute("SELECT COUNT(*) FROM news")
    count = cursor.fetchone()[0]
    print(f"‚úì –í –±–∞–∑–µ {count} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    if count == 0:
        print("  ‚ö† –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python parse_fragrantica_news.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    cursor.execute("SELECT COUNT(*) FROM news WHERE news_full IS NOT NULL")
    full_count = cursor.fetchone()[0]
    print(f"‚úì –° –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: {full_count}/{count}")
    
    if full_count < count:
        print("  ‚ö† –ù–µ —É –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç")
        print("    –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python parse_full_news.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT COUNT(*) FROM news WHERE news_rewritten IS NOT NULL")
    rewritten_count = cursor.fetchone()[0]
    print(f"‚úì –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ: {rewritten_count}/{count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    cursor.execute("SELECT COUNT(*) FROM news WHERE images IS NOT NULL AND images != '[]'")
    images_count = cursor.fetchone()[0]
    print(f"‚úì –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {images_count}/{count}")
    
    if images_count < count:
        print("  ‚ö† –ù–µ —É –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("    –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python parse_images.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É images
    if os.path.exists('images'):
        image_files = len([f for f in os.listdir('images') if os.path.isfile(os.path.join('images', f))])
        print(f"‚úì –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_files}")
    else:
        print("‚ö† –ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python add_images_column.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É config
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='config'")
    if not cursor.fetchone():
        print("‚úó –¢–∞–±–ª–∏—Ü–∞ config –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python add_rewritten_column.py")
        conn.close()
        return False
    
    print("‚úì –¢–∞–±–ª–∏—Ü–∞ config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    conn.close()
    return True

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not os.path.exists('fragrantica_news.db'):
        return False
    
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT key FROM config")
        keys = {row[0] for row in cursor.fetchall()}
    except:
        conn.close()
        return False
    
    required_keys = {'openai_api_key', 'telegram_bot_token', 'telegram_channel_id'}
    
    print("\n=== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===")
    
    for key in required_keys:
        if key in keys:
            print(f"‚úì {key} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print(f"‚úó {key} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    missing_keys = required_keys - keys
    
    if missing_keys:
        print(f"\n‚ö† –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_keys)}")
        print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_config.py")
        conn.close()
        return False
    
    conn.close()
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\n=== –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ===")
    
    dependencies = [
        ('requests', 'requests'),
        ('beautifulsoup4', 'bs4'),
        ('cloudscraper', 'cloudscraper'),
        ('openai', 'openai')
    ]
    
    all_installed = True
    
    for package_name, import_name in dependencies:
        try:
            __import__(import_name)
            print(f"‚úì {package_name}")
        except ImportError:
            print(f"‚úó {package_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_installed = False
    
    if not all_installed:
        print("\n  –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -r requirements.txt")
        return False
    
    return True

def main():
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    deps_ok = check_dependencies()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n=== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    db_ok = check_database()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = check_config()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    
    if deps_ok and db_ok and config_ok:
        print("‚úì –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram:")
        print("  python test_telegram.py")
        print("\n–ò–ª–∏ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏:")
        print("  python publish_news.py <ID>")
    else:
        print("‚ö† –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        print("\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã—à–µ")
        print("–ò–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ: QUICKSTART.md")
    
    print("="*50)

if __name__ == '__main__':
    main()

