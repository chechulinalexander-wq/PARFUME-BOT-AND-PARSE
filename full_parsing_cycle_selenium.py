import sqlite3
import undetected_chromedriver as uc
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import sys
import io
import time
import unicodedata
import re
from rapidfuzz import fuzz
import cloudscraper
import warnings

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings('ignore')

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ============================================================================

MAX_PRODUCTS = 1000
CATALOG_URL = 'https://randewoo.ru/category/parfyumeriya'

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò SMARTPROXY
# ============================================================================

SMARTPROXY_HOST = "proxy.smartproxy.net"
SMARTPROXY_PORT = 3120
SMARTPROXY_USER = "smart-qad2gx6xmehj"
SMARTPROXY_PASS = "twYMsn3pEJ4DqZqk"

# –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏
PROXY_URL = f"http://{SMARTPROXY_USER}:{SMARTPROXY_PASS}@{SMARTPROXY_HOST}:{SMARTPROXY_PORT}"

# ============================================================================
# –®–ê–ì 1: –û–ß–ò–°–¢–ö–ê –ë–î
# ============================================================================

def clear_database():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É randewoo_products"""
    print("\n" + "="*80, flush=True)
    print("–®–ê–ì 1: –û–ß–ò–°–¢–ö–ê –ë–î", flush=True)
    print("="*80 + "\n", flush=True)
    
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM randewoo_products')
    products_count = cursor.fetchone()[0]
    cursor.execute('DELETE FROM randewoo_products')
    print(f"‚úì –£–¥–∞–ª–µ–Ω–æ {products_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ randewoo_products")
    
    conn.commit()
    conn.close()
    
    print("\n‚úì –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")

# ============================================================================
# –®–ê–ì 2: –ü–ê–†–°–ò–ù–ì RANDEWOO –° SELENIUM
# ============================================================================

def parse_randewoo_with_selenium(max_products=1000):
    """–ü–∞—Ä—Å–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ Randewoo –∏—Å–ø–æ–ª—å–∑—É—è Selenium"""
    print("\n" + "="*80, flush=True)
    print(f"–®–ê–ì 2: –ü–ê–†–°–ò–ù–ì RANDEWOO (–ª–∏–º–∏—Ç: {max_products} —Ç–æ–≤–∞—Ä–æ–≤)", flush=True)
    print("="*80 + "\n", flush=True)
    
    conn = sqlite3.connect('fragrantica_news.db', timeout=30)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    cursor.execute('SELECT COUNT(*) FROM randewoo_products')
    existing_count = cursor.fetchone()[0]
    print(f"üìä –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {existing_count}", flush=True)
    
    if existing_count >= max_products:
        print(f"‚úì –õ–∏–º–∏—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({existing_count}/{max_products})")
        conn.close()
        return existing_count
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
    options = uc.ChromeOptions()
    options.headless = True  # –ë–µ–∑ GUI
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    
    print("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-20 —Å–µ–∫)...", flush=True)
    print("   (–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ...)", flush=True)
    
    driver = uc.Chrome(options=options, version_main=None)
    
    print("‚úì Chrome –∑–∞–ø—É—â–µ–Ω!", flush=True)
    
    all_products = []
    page = 1
    
    try:
        while len(all_products) < max_products:
            if page == 1:
                page_url = CATALOG_URL
            else:
                page_url = f"{CATALOG_URL}?page={page}"
            
            print(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {page_url}", flush=True)
            
            try:
                print("  üåê –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...", end=" ", flush=True)
                driver.get(page_url)
                print("‚úì", flush=True)
                
                # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ URL –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
                if page == 1:
                    print("  üîΩ –ü—Ä–∏–º–µ–Ω—è—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º...", end=" ", flush=True)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ URL —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
                    sorted_url = f"{CATALOG_URL}?sorting=comments_count"
                    driver.get(sorted_url)
                    
                    print("‚úì", flush=True)
                    print("  ‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (10 —Å–µ–∫)...", end=" ", flush=True)
                    time.sleep(10)
                    print("‚úì", flush=True)
                else:
                    print("  ‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JS (8 —Å–µ–∫)...", end=" ", flush=True)
                    time.sleep(8)
                    print("‚úì", flush=True)
                
                page_source = driver.page_source
                soup = BeautifulSoup(page_source, 'html.parser')
                
                products = soup.find_all('li', class_='products__item')
                
                if not products:
                    print(f"  ‚ö† –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                    break
                
                print(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                for product in products:
                    if len(all_products) >= max_products:
                        break
                    
                    try:
                        brand_div = product.find('div', class_='b-catalogItem__brand')
                        name_div = product.find('div', class_='b-catalogItem__name')
                        link = product.find('a', class_='b-catalogItem__descriptionLink')
                        
                        if brand_div and name_div and link:
                            brand = brand_div.get_text(strip=True)
                            name = name_div.get_text(strip=True)
                            product_url = urljoin('https://randewoo.ru', link['href'])
                            
                            cursor.execute('''
                                INSERT OR IGNORE INTO randewoo_products (brand, name, product_url)
                                VALUES (?, ?, ?)
                            ''', (brand, name, product_url))
                            
                            all_products.append({'brand': brand, 'name': name, 'url': product_url})
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                            print(f"  [{len(all_products)}/{max_products}] {brand} - {name}")
                            
                    except Exception as e:
                        print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
                
                conn.commit()
                print(f"  –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_products)}/{max_products}")
                
                if len(all_products) >= max_products:
                    print(f"\n‚úì –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {max_products} —Ç–æ–≤–∞—Ä–æ–≤")
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                pagination = soup.find('ol', class_='pager')
                if pagination:
                    next_link = pagination.find('a', class_='pager__link--forward')
                    if not next_link:
                        print(f"\n‚úì –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü")
                        break
                else:
                    print(f"\n‚ö† –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    break
                
                page += 1
                
            except Exception as e:
                print(f"  ‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                break
    
    finally:
        driver.quit()
        conn.close()
    
    print(f"\n‚úì –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
    return len(all_products)

# ============================================================================
# –®–ê–ì 3: –ü–û–ò–°–ö –ù–ê FRAGRANTICA
# ============================================================================

def normalize_text(text):
    text = text.lower()
    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8')
    text = re.sub(r'[^a-z0-9]+', ' ', text)
    return text.strip()

def search_fragrantica(scraper, brand, name, brand_cache):
    """–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑ add_fragrantica_url_final.py"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –±—Ä–µ–Ω–¥–∞
    brand_key = brand.lower().strip()
    if brand_key in brand_cache:
        perfume_links = brand_cache[brand_key]
        
        name_normalized = normalize_text(name)
        name_lower = name.lower().strip()
        
        best_match = None
        best_match_score = 0
        
        for plink in perfume_links:
            purl = plink['url']
            ptext = plink['text']
            
            ptext_normalized = normalize_text(ptext)
            ptext_lower = ptext.lower().strip()
            
            if name_normalized == ptext_normalized:
                return purl
            
            fuzzy_score = fuzz.token_sort_ratio(name_lower, ptext_lower)
            partial_score = fuzz.partial_ratio(name_lower, ptext_lower)
            token_set_score = fuzz.token_set_ratio(name_lower, ptext_lower)
            
            max_fuzzy_score = max(fuzzy_score, partial_score, token_set_score)
            
            if max_fuzzy_score > best_match_score and max_fuzzy_score >= 70:
                best_match = purl
                best_match_score = max_fuzzy_score
            
            if len(name_normalized) > 5:
                name_words = set(name_lower.split())
                ptext_words = set(ptext_lower.split())
                common_words = name_words & ptext_words
                
                if len(name_words) > 0:
                    word_match_ratio = len(common_words) / len(name_words) * 100
                    
                    if word_match_ratio > best_match_score and word_match_ratio >= 70:
                        best_match = purl
                        best_match_score = word_match_ratio
        
        if best_match and best_match_score >= 70:
            return best_match
        
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–µ–Ω–¥–∞
    brand_variants = [
        brand.replace(' ', '-'),
        brand,
    ]
    
    brand_page_url = None
    perfume_links = []
    
    for brand_variant in brand_variants:
        test_url = f"https://www.fragrantica.ru/designers/{brand_variant}.html"
        
        try:
            response = scraper.get(test_url, timeout=10)
            
            if response.status_code == 200:
                brand_page_url = test_url
                break
        except:
            continue
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ URL –±—Ä–µ–Ω–¥–∞
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–µ–Ω–¥–∞
    if brand_page_url:
        try:
            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–µ–Ω–¥–∞
            response = scraper.get(brand_page_url, timeout=30)
            response.encoding = 'utf-8'
            soup = BeautifulSoup(response.text, 'html.parser')
            
            perfume_links_raw = soup.find_all('a', href=lambda x: x and '/perfume/' in x)
            
            name_normalized = normalize_text(name)
            name_lower = name.lower().strip()
            result_url = None
            best_match_score = 0
            
            for plink in perfume_links_raw:
                purl = urljoin('https://www.fragrantica.ru', plink.get('href'))
                ptext = plink.get_text(strip=True)
                perfume_links.append({'url': purl, 'text': ptext})
                
                ptext_normalized = normalize_text(ptext)
                ptext_lower = ptext.lower().strip()
                
                if name_normalized == ptext_normalized:
                    result_url = purl
                    break
                
                fuzzy_score = fuzz.token_sort_ratio(name_lower, ptext_lower)
                partial_score = fuzz.partial_ratio(name_lower, ptext_lower)
                token_set_score = fuzz.token_set_ratio(name_lower, ptext_lower)
                
                max_fuzzy_score = max(fuzzy_score, partial_score, token_set_score)
                
                if max_fuzzy_score > best_match_score and max_fuzzy_score >= 70:
                    result_url = purl
                    best_match_score = max_fuzzy_score
                
                if len(name_normalized) > 5:
                    name_words = set(name_lower.split())
                    ptext_words = set(ptext_lower.split())
                    common_words = name_words & ptext_words
                    
                    if len(name_words) > 0:
                        word_match_ratio = len(common_words) / len(name_words) * 100
                        if word_match_ratio > best_match_score and word_match_ratio >= 70:
                            result_url = purl
                            best_match_score = word_match_ratio
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            brand_cache[brand_key] = perfume_links
            
            if result_url:
                return result_url
        
        except Exception as e:
            pass
    
    # –ö–µ—à–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    brand_cache[brand_key] = []
    return None

def match_fragrantica_urls():
    print("\n" + "="*80)
    print("–®–ê–ì 3: –ü–û–ò–°–ö –ù–ê FRAGRANTICA")
    print("="*80 + "\n")
    
    print(f"üåê –ü—Ä–æ–∫—Å–∏: {SMARTPROXY_HOST}:{SMARTPROXY_PORT}")
    print(f"üë§ User: {SMARTPROXY_USER}\n")
    
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute('ALTER TABLE randewoo_products ADD COLUMN fragrantica_url TEXT')
        conn.commit()
    except:
        pass
    
    cursor.execute('SELECT id, brand, name FROM randewoo_products WHERE fragrantica_url IS NULL')
    products = cursor.fetchall()
    
    if not products:
        print("‚úì –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç Fragrantica URL")
        conn.close()
        return
    
    print(f"–¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(products)}\n")
    
    BATCH_SIZE = 10
    BATCH_PAUSE = 5  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
    
    found = 0
    not_found = 0
    
    total_batches = (len(products) + BATCH_SIZE - 1) // BATCH_SIZE
    
    for batch_num in range(0, len(products), BATCH_SIZE):
        batch_products = products[batch_num:batch_num + BATCH_SIZE]
        current_batch = batch_num // BATCH_SIZE + 1
        
        print(f"{'='*80}")
        print(f"–ü–ê–ö–ï–¢ {current_batch}/{total_batches}")
        print(f"{'='*80}\n")
        
        scraper = cloudscraper.create_scraper(
            browser={'browser': 'chrome', 'platform': 'windows', 'mobile': False}
        )
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ Smartproxy
        scraper.proxies = {
            'http': PROXY_URL,
            'https': PROXY_URL
        }
        brand_cache = {}
        
        for idx_in_batch, (product_id, brand, name) in enumerate(batch_products, 1):
            global_idx = batch_num + idx_in_batch
            
            print(f"[{global_idx}/{len(products)}] {brand} - {name}")
            print(f"  üîç –ò—â—É –Ω–∞ Fragrantica...", end=" ", flush=True)
            
            try:
                fragrantica_url = search_fragrantica(scraper, brand, name, brand_cache)
                
                if fragrantica_url:
                    cursor.execute('UPDATE randewoo_products SET fragrantica_url = ? WHERE id = ?', 
                                 (fragrantica_url, product_id))
                    conn.commit()
                    found += 1
                    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ")
                    print(f"     {fragrantica_url}")
                else:
                    not_found += 1
                    print(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                time.sleep(2)  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                not_found += 1
                print(f"‚úó –û—à–∏–±–∫–∞: {e}")
        
        if current_batch < total_batches:
            print(f"\n‚è∏  –ü–∞—É–∑–∞ {BATCH_PAUSE} —Å–µ–∫...\n")
            time.sleep(BATCH_PAUSE)
    
    conn.close()
    
    print(f"\n{'='*80}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ: {found} ({found/len(products)*100:.1f}%)")
    print(f"  –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found}")
    print(f"{'='*80}")

# ============================================================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================================================

def main():
    print("\n" + "="*80, flush=True)
    print("–ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì - –£–ú–ù–´–ô –†–ï–ñ–ò–ú", flush=True)
    print("="*80, flush=True)
    
    start_time = time.time()
    
    try:
        # ============================================================
        # –®–ê–ì 0: –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î
        # ============================================================
        print("\n" + "="*80, flush=True)
        print("–®–ê–ì 0: –ê–ù–ê–õ–ò–ó –ë–î", flush=True)
        print("="*80 + "\n", flush=True)
        
        conn = sqlite3.connect('fragrantica_news.db', timeout=30)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('SELECT COUNT(*) FROM randewoo_products')
        total_products = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å Fragrantica URL
        cursor.execute('SELECT COUNT(*) FROM randewoo_products WHERE fragrantica_url IS NOT NULL')
        products_with_fragrantica = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
        print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {total_products}")
        print(f"  ‚Ä¢ –° Fragrantica URL: {products_with_fragrantica}\n")
        
        # ============================================================
        # –ü–†–ò–ù–ò–ú–ê–ï–ú –†–ï–®–ï–ù–ò–ï –û –ü–õ–ê–ù–ï –î–ï–ô–°–¢–í–ò–ô
        # ============================================================
        
        if total_products == 0:
            print("üìã –ü–õ–ê–ù: –ü–û–õ–ù–´–ô –¶–ò–ö–õ (–ë–î –ø—É—Å—Ç–∞—è)")
            print("  1. ‚úì –ü–∞—Ä—Å–∏–Ω–≥ Randewoo")
            print("  2. ‚úì –ü–æ–∏—Å–∫ –Ω–∞ Fragrantica\n")
            
            products_count = parse_randewoo_with_selenium(MAX_PRODUCTS)
            
            if products_count == 0:
                print("\n‚úó –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            match_fragrantica_urls()
            
        elif products_with_fragrantica == 0:
            print("üìã –ü–õ–ê–ù: –¢–û–õ–¨–ö–û –ü–û–ò–°–ö FRAGRANTICA")
            print("  1. ‚äò –ü–∞—Ä—Å–∏–Ω–≥ Randewoo (–ø—Ä–æ–ø—É—â–µ–Ω - —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å)")
            print("  2. ‚úì –ü–æ–∏—Å–∫ –Ω–∞ Fragrantica\n")
            
            match_fragrantica_urls()
            
        elif products_with_fragrantica < total_products:
            print("üìã –ü–õ–ê–ù: –î–û–ì–†–£–ó–ö–ê FRAGRANTICA")
            print("  1. ‚äò –ü–∞—Ä—Å–∏–Ω–≥ Randewoo (–ø—Ä–æ–ø—É—â–µ–Ω)")
            print("  2. ‚úì –ü–æ–∏—Å–∫ –Ω–∞ Fragrantica (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö)\n")
            
            match_fragrantica_urls()
            
        else:
            print("üìã –í–°–ï –ì–û–¢–û–í–û!")
            print("  1. ‚äò –ü–∞—Ä—Å–∏–Ω–≥ Randewoo (–ø—Ä–æ–ø—É—â–µ–Ω)")
            print("  2. ‚äò –ü–æ–∏—Å–∫ –Ω–∞ Fragrantica (–ø—Ä–æ–ø—É—â–µ–Ω - –≤—Å–µ –Ω–∞–π–¥–µ–Ω—ã)\n")
        
        elapsed = time.time() - start_time
        
        print("\n" + "="*80)
        print("–¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
        print("="*80 + "\n")
        
    except KeyboardInterrupt:
        print("\n\n‚ö† –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()

