import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sqlite3
import sys
import io
from openai import OpenAI
import requests
import json
import os
from datetime import datetime

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

class PerfumePublisherApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Perfume Publisher - Telegram Bot Manager")
        self.root.geometry("1400x800")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.db_path = 'fragrantica_news.db'
        self.selected_row_id = None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # ==============================================================
        # –í–ï–†–•–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ - –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        # ==============================================================
        
        table_frame = ttk.LabelFrame(self.root, text="üì¶ –¢–æ–≤–∞—Ä—ã Randewoo", padding=10)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π
        buttons_frame = ttk.Frame(table_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_row).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_row).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_row).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.load_data).pack(side=tk.LEFT, padx=5)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        tree_frame = ttk.Frame(table_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbars
        vsb = ttk.Scrollbar(tree_frame, orient="vertical")
        hsb = ttk.Scrollbar(tree_frame, orient="horizontal")
        
        # Treeview
        self.tree = ttk.Treeview(tree_frame, 
                                 columns=("id", "brand", "name", "product_url", "fragrantica_url"),
                                 show="headings",
                                 yscrollcommand=vsb.set,
                                 xscrollcommand=hsb.set,
                                 height=15)
        
        vsb.config(command=self.tree.yview)
        hsb.config(command=self.tree.xview)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("id", text="ID")
        self.tree.heading("brand", text="–ë—Ä–µ–Ω–¥")
        self.tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("product_url", text="URL Randewoo")
        self.tree.heading("fragrantica_url", text="URL Fragrantica")
        
        self.tree.column("id", width=50, anchor="center")
        self.tree.column("brand", width=150)
        self.tree.column("name", width=300)
        self.tree.column("product_url", width=350)
        self.tree.column("fragrantica_url", width=350)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
        self.tree.bind("<<TreeviewSelect>>", self.on_row_select)
        
        # ==============================================================
        # –ù–ò–ñ–ù–Ø–Ø –ü–ê–ù–ï–õ–¨ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        # ==============================================================
        
        bottom_frame = ttk.Frame(self.root)
        bottom_frame.pack(fill=tk.BOTH, expand=False, padx=10, pady=(0, 10))
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ü—Ä–æ–º–ø—Ç GPT
        left_frame = ttk.LabelFrame(bottom_frame, text="ü§ñ –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT", padding=10)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        self.prompt_text = scrolledtext.ScrolledText(left_frame, height=12, wrap=tk.WORD, font=("Consolas", 9))
        self.prompt_text.pack(fill=tk.BOTH, expand=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_prompt = """–ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. 
–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 900 —Å–∏–º–≤–æ–ª–æ–≤) –æ –ø–∞—Ä—Ñ—é–º–µ {brand} {name}.

–°—Ç–∏–ª—å:
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, —Ç–µ–ø–ª—ã–π, –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã (1-2 —Å—Ç—Ä–æ–∫–∏)
- –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (–∑–∞–ø–∞—Ö–∏, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏)
- 2-3 —ç–º–æ–¥–∑–∏ –º–∞–∫—Å–∏–º—É–º
- –ó–∞–∫–æ–Ω—á–∏ –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–∏–∑—ã–≤–æ–º

–ü–∏—à–∏ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        self.prompt_text.insert("1.0", default_prompt)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        right_frame = ttk.Frame(bottom_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=False)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        info_frame = ttk.LabelFrame(right_frame, text="üìã –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.selected_info_label = ttk.Label(info_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ", 
                                            font=("Segoe UI", 10), wraplength=300)
        self.selected_info_label.pack()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        settings_frame = ttk.LabelFrame(right_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(settings_frame, text="OpenAI API Key:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.openai_key_entry = ttk.Entry(settings_frame, width=30, show="‚Ä¢")
        self.openai_key_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(settings_frame, text="Telegram Bot Token:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.tg_token_entry = ttk.Entry(settings_frame, width=30, show="‚Ä¢")
        self.tg_token_entry.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(settings_frame, text="Telegram Channel ID:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.tg_channel_entry = ttk.Entry(settings_frame, width=30)
        self.tg_channel_entry.grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Button(settings_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_settings).grid(row=3, column=0, columnspan=2, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publish_frame = ttk.Frame(right_frame)
        publish_frame.pack(fill=tk.X)
        
        self.publish_button = ttk.Button(publish_frame, text="üì§ –û–ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –í TELEGRAM", 
                                         command=self.publish_to_telegram, 
                                         style="Accent.TButton")
        self.publish_button.pack(fill=tk.X, ipady=15)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ç–∞–±–ª–∏—Ü—É"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, brand, name, product_url, fragrantica_url 
                FROM randewoo_products 
                ORDER BY id DESC
            ''')
            
            rows = cursor.fetchall()
            
            for row in rows:
                self.tree.insert("", tk.END, values=row)
            
            conn.close()
            
            self.root.title(f"Perfume Publisher - {len(rows)} —Ç–æ–≤–∞—Ä–æ–≤")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{e}")
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # OpenAI API Key
            cursor.execute('SELECT value FROM config WHERE key = ?', ('openai_api_key',))
            result = cursor.fetchone()
            if result:
                self.openai_key_entry.insert(0, result[0])
            
            # Telegram Bot Token
            cursor.execute('SELECT value FROM config WHERE key = ?', ('telegram_bot_token',))
            result = cursor.fetchone()
            if result:
                self.tg_token_entry.insert(0, result[0])
            
            # Telegram Channel ID
            cursor.execute('SELECT value FROM config WHERE key = ?', ('telegram_channel_id',))
            result = cursor.fetchone()
            if result:
                self.tg_channel_entry.insert(0, result[0])
            
            conn.close()
            
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É config –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS config (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = [
                ('openai_api_key', self.openai_key_entry.get()),
                ('telegram_bot_token', self.tg_token_entry.get()),
                ('telegram_channel_id', self.tg_channel_entry.get())
            ]
            
            for key, value in settings:
                cursor.execute('''
                    INSERT OR REPLACE INTO config (key, value, updated_at)
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                ''', (key, value))
            
            conn.commit()
            conn.close()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{e}")
    
    def on_row_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selection = self.tree.selection()
        if selection:
            item = self.tree.item(selection[0])
            values = item['values']
            
            self.selected_row_id = values[0]
            brand = values[1]
            name = values[2]
            
            self.selected_info_label.config(
                text=f"‚úì –í—ã–±—Ä–∞–Ω–æ:\n{brand} - {name}\n(ID: {self.selected_row_id})"
            )
    
    def add_row(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
        dialog = AddEditDialog(self.root, "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        if dialog.result:
            try:
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO randewoo_products (brand, name, product_url, fragrantica_url, parsed_at)
                    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
                ''', (dialog.result['brand'], dialog.result['name'], 
                      dialog.result['product_url'], dialog.result['fragrantica_url']))
                
                conn.commit()
                conn.close()
                
                self.load_data()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:\n{e}")
    
    def edit_row(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = self.tree.item(selection[0])
        values = item['values']
        
        dialog = AddEditDialog(self.root, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", {
            'id': values[0],
            'brand': values[1],
            'name': values[2],
            'product_url': values[3],
            'fragrantica_url': values[4]
        })
        
        if dialog.result:
            try:
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                
                cursor.execute('''
                    UPDATE randewoo_products 
                    SET brand = ?, name = ?, product_url = ?, fragrantica_url = ?
                    WHERE id = ?
                ''', (dialog.result['brand'], dialog.result['name'], 
                      dialog.result['product_url'], dialog.result['fragrantica_url'],
                      values[0]))
                
                conn.commit()
                conn.close()
                
                self.load_data()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:\n{e}")
    
    def delete_row(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        item = self.tree.item(selection[0])
        values = item['values']
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n{values[1]} - {values[2]}?"):
            try:
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                
                cursor.execute('DELETE FROM randewoo_products WHERE id = ?', (values[0],))
                
                conn.commit()
                conn.close()
                
                self.load_data()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n{e}")
    
    def publish_to_telegram(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ Telegram"""
        if not self.selected_row_id:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        openai_key = self.openai_key_entry.get()
        tg_token = self.tg_token_entry.get()
        tg_channel = self.tg_channel_entry.get()
        
        if not openai_key:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        
        if not tg_token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ Telegram Bot Token –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        
        if not tg_channel:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ Telegram Channel ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT brand, name, product_url, fragrantica_url 
                FROM randewoo_products 
                WHERE id = ?
            ''', (self.selected_row_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if not row:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
            
            brand, name, product_url, fragrantica_url = row
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n{e}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self.prompt_text.get("1.0", tk.END).strip()
        prompt = prompt.replace("{brand}", brand).replace("{name}", name)
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_window = tk.Toplevel(self.root)
        progress_window.title("–ü—É–±–ª–∏–∫–∞—Ü–∏—è...")
        progress_window.geometry("400x150")
        progress_window.transient(self.root)
        progress_window.grab_set()
        
        status_label = ttk.Label(progress_window, text="ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT...", 
                                font=("Segoe UI", 10))
        status_label.pack(pady=20)
        
        progress = ttk.Progressbar(progress_window, mode='indeterminate')
        progress.pack(fill=tk.X, padx=20)
        progress.start()
        
        def do_publish():
            try:
                # –®–∞–≥ 1: GPT
                status_label.config(text="ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT...")
                progress_window.update()
                
                text_to_rewrite = f"–ë—Ä–µ–Ω–¥: {brand}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nURL: {product_url}"
                if fragrantica_url:
                    text_to_rewrite += f"\nFragrantica: {fragrantica_url}"
                
                client = OpenAI(api_key=openai_key)
                
                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": prompt},
                        {"role": "user", "content": text_to_rewrite}
                    ],
                    temperature=0.7
                )
                
                rewritten_text = response.choices[0].message.content
                
                # –®–∞–≥ 2: Telegram
                status_label.config(text="üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
                progress_window.update()
                
                url = f"https://api.telegram.org/bot{tg_token}/sendMessage"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü
                footer = f"\n\nüîó Randewoo: {product_url}"
                if fragrantica_url:
                    footer += f"\nüå∏ Fragrantica: {fragrantica_url}"
                
                full_text = rewritten_text + footer
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
                if len(full_text) > 4096:
                    full_text = full_text[:4093] + "..."
                
                response = requests.post(url, json={
                    "chat_id": tg_channel,
                    "text": full_text,
                    "disable_web_page_preview": False
                }, timeout=30)
                
                result = response.json()
                
                progress.stop()
                progress_window.destroy()
                
                if result.get('ok'):
                    messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                      f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
                                      f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(full_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                                      f"Message ID: {result['result']['message_id']}")
                else:
                    error_desc = result.get('description', 'Unknown error')
                    messagebox.showerror("–û—à–∏–±–∫–∞ Telegram", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å:\n{error_desc}")
                
            except Exception as e:
                progress.stop()
                progress_window.destroy()
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)[:500]}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–¥–ª—è UI responsiveness)
        import threading
        thread = threading.Thread(target=do_publish)
        thread.start()


class AddEditDialog:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    
    def __init__(self, parent, title, initial_values=None):
        self.result = None
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(title)
        self.dialog.geometry("600x350")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –ü–æ–ª—è
        fields_frame = ttk.Frame(self.dialog, padding=20)
        fields_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(fields_frame, text="–ë—Ä–µ–Ω–¥:").grid(row=0, column=0, sticky=tk.W, pady=10)
        self.brand_entry = ttk.Entry(fields_frame, width=50)
        self.brand_entry.grid(row=0, column=1, pady=10, padx=10)
        
        ttk.Label(fields_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, pady=10)
        self.name_entry = ttk.Entry(fields_frame, width=50)
        self.name_entry.grid(row=1, column=1, pady=10, padx=10)
        
        ttk.Label(fields_frame, text="URL Randewoo:").grid(row=2, column=0, sticky=tk.W, pady=10)
        self.product_url_entry = ttk.Entry(fields_frame, width=50)
        self.product_url_entry.grid(row=2, column=1, pady=10, padx=10)
        
        ttk.Label(fields_frame, text="URL Fragrantica:").grid(row=3, column=0, sticky=tk.W, pady=10)
        self.fragrantica_url_entry = ttk.Entry(fields_frame, width=50)
        self.fragrantica_url_entry.grid(row=3, column=1, pady=10, padx=10)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if initial_values:
            self.brand_entry.insert(0, initial_values.get('brand', ''))
            self.name_entry.insert(0, initial_values.get('name', ''))
            self.product_url_entry.insert(0, initial_values.get('product_url', ''))
            self.fragrantica_url_entry.insert(0, initial_values.get('fragrantica_url', ''))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.dialog)
        buttons_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save).pack(side=tk.RIGHT, padx=5)
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=self.dialog.destroy).pack(side=tk.RIGHT, padx=5)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (self.dialog.winfo_width() // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (self.dialog.winfo_height() // 2)
        self.dialog.geometry(f'+{x}+{y}')
        
        self.dialog.wait_window()
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        brand = self.brand_entry.get().strip()
        name = self.name_entry.get().strip()
        product_url = self.product_url_entry.get().strip()
        fragrantica_url = self.fragrantica_url_entry.get().strip()
        
        if not brand or not name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            return
        
        self.result = {
            'brand': brand,
            'name': name,
            'product_url': product_url,
            'fragrantica_url': fragrantica_url
        }
        
        self.dialog.destroy()


def main():
    root = tk.Tk()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        from ttkbootstrap import Style
        style = Style(theme='cosmo')
    except ImportError:
        # –ï—Å–ª–∏ ttkbootstrap –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
        pass
    
    app = PerfumePublisherApp(root)
    root.mainloop()


if __name__ == '__main__':
    main()

