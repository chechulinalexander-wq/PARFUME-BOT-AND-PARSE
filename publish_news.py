import sqlite3
import sys
import io
import time
from openai import OpenAI
import requests
import json
import os

# –§–∏–∫—Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

PROMPT = """Imagine you are the world's best messaging strategist and copywriter, as well as a perfume expert and practicing perfumer. Take a deep breath and, step by step, rewrite this text so it can be posted in a Telegram channel.

CRITICAL REQUIREMENTS:
1. Write ONLY in Russian language (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
2. Keep the text under 900 characters (including spaces) - this is STRICT
3. Make it concise and focused on the most interesting details

Style guidelines:
- Conversational, warm, feminine voice in first person
- Very short paragraphs (1-2 lines max)
- Add 1-2 gentle sensory details (smells, textures)
- Use 1-2 light rhetorical questions for intimacy
- Emojis: maximum 2-3 per post
- Avoid bureaucratic wording and complicated terms
- End with a soft, engaging question or invitation

Remember: Russian language ONLY. Maximum 900 characters. Focus on emotion and key details, skip minor information."""

def get_config(key):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –ë–î"""
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    cursor.execute('SELECT value FROM config WHERE key = ?', (key,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def get_news_by_id(news_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID"""
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, title, url, news_full, news_rewritten, images FROM news WHERE id = ?', (news_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def save_rewritten_news(news_id, rewritten_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ë–î"""
    conn = sqlite3.connect('fragrantica_news.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE news SET news_rewritten = ? WHERE id = ?', (rewritten_text, news_id))
    conn.commit()
    conn.close()

def rewrite_with_gpt(text, api_key):
    """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT"""
    print("\nüìù –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ ChatGPT...")
    
    try:
        client = OpenAI(api_key=api_key)
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": PROMPT},
                {"role": "user", "content": text}
            ],
            temperature=0.7
        )
        
        rewritten = response.choices[0].message.content
        print("‚úì –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω ChatGPT")
        print(f"  –î–ª–∏–Ω–∞: {len(rewritten)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if len(rewritten) > 1024:
            print("  ‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è caption")
        elif len(rewritten) > 900:
            print("  ‚ö† –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö 900 —Å–∏–º–≤–æ–ª–æ–≤")
        
        return rewritten
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")
        return None

def publish_to_telegram(text, bot_token, channel_id, image_paths=None):
    """–ü—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
    print("\nüì§ –ü—É–±–ª–∏–∫—É—é –≤ Telegram –∫–∞–Ω–∞–ª...")
    print(f"   Channel ID: {channel_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if image_paths and len(image_paths) > 0:
        existing_images = [img for img in image_paths if os.path.exists(img)]
        
        if existing_images:
            print(f"   üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ—Å—Ç —Å {len(existing_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º media group —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏
            success = send_media_group_with_caption(bot_token, channel_id, existing_images, text)
            
            if success:
                print(f"   ‚úì –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                return True
            else:
                print("   ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å media group, –ø—Ä–æ–±—É—é —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ...")
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    print("   üìù –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç...")
    return send_text_only(text, bot_token, channel_id)

def send_media_group_with_caption(bot_token, channel_id, photo_paths, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∫–∞–∫ media group —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏"""
    url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"
    
    # Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ 10 –º–µ–¥–∏–∞ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
    photo_paths = photo_paths[:10]
    
    # Telegram –ª–∏–º–∏—Ç –Ω–∞ caption - 1024 —Å–∏–º–≤–æ–ª–∞
    if len(caption) > 1024:
        print(f"      ‚ö† Caption —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(caption)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞—é –¥–æ 1024")
        caption = caption[:1021] + "..."
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞
        media = []
        files = {}
        
        for i, photo_path in enumerate(photo_paths):
            attach_name = f"photo{i}"
            files[attach_name] = open(photo_path, 'rb')
            
            # –î–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
            if i == 0:
                media.append({
                    "type": "photo",
                    "media": f"attach://{attach_name}",
                    "caption": caption
                })
            else:
                media.append({
                    "type": "photo",
                    "media": f"attach://{attach_name}"
                })
        
        data = {
            'chat_id': channel_id,
            'media': json.dumps(media, ensure_ascii=False)
        }
        
        response = requests.post(url, data=data, files=files, timeout=60)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for f in files.values():
            f.close()
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            result = response.json()
            error_desc = result.get('description', 'Unknown error')
            print(f"      ‚úó –û—à–∏–±–∫–∞: {error_desc}")
        except:
            print(f"      ‚úó HTTP Error {response.status_code}")
        
        return False
        
    except Exception as e:
        print(f"      ‚úó –û—à–∏–±–∫–∞: {e}")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        for f in files.values():
            if not f.closed:
                f.close()
        return False

def send_text_only(text, bot_token, channel_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    # Telegram –ª–∏–º–∏—Ç: 4096 —Å–∏–º–≤–æ–ª–æ–≤
    MAX_LENGTH = 4096
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(text) > MAX_LENGTH:
        print(f"   ‚ö† –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        parts = []
        current_part = ""
        
        for paragraph in text.split('\n\n'):
            if len(current_part) + len(paragraph) + 2 <= MAX_LENGTH:
                if current_part:
                    current_part += '\n\n'
                current_part += paragraph
            else:
                if current_part:
                    parts.append(current_part)
                current_part = paragraph
        
        if current_part:
            parts.append(current_part)
        
        print(f"   üìù –û—Ç–ø—Ä–∞–≤–ª—è—é {len(parts)} —á–∞—Å—Ç–µ–π...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(parts, 1):
            data = {"chat_id": channel_id, "text": part}
            
            try:
                response = requests.post(url, json=data, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        print(f"      ‚úì –ß–∞—Å—Ç—å {i}/{len(parts)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    else:
                        print(f"      ‚úó –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i}: {result.get('description')}")
                        return False
                else:
                    print(f"      ‚úó HTTP {response.status_code}")
                    return False
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                if i < len(parts):
                    time.sleep(0.5)
                    
            except Exception as e:
                print(f"      ‚úó –û—à–∏–±–∫–∞: {e}")
                return False
        
        return True
    
    # –¢–µ–∫—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
    data = {
        "chat_id": channel_id,
        "text": text
    }
    
    try:
        response = requests.post(url, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print(f"   ‚úì –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}")
                message_id = result['result']['message_id']
                print(f"   Message ID: {message_id}")
                return True
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        try:
            result = response.json()
            error_description = result.get('description', 'Unknown error')
            error_code = result.get('error_code', response.status_code)
            
            print(f"‚úó Telegram API Error {error_code}: {error_description}")
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            if "chat not found" in error_description.lower():
                print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
                print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Channel ID")
                print("  2. –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: @channelname")
                print("  3. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: -100xxxxxxxxxx")
                print("  4. –ü–æ–ª—É—á–∏—Ç—å ID –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot")
            elif "bot was blocked" in error_description.lower() or "forbidden" in error_description.lower():
                print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
                print("  1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª")
                print("  2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")
                print("  3. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–æ 'Post messages'")
            elif "message is too long" in error_description.lower():
                print("\nüí° –†–µ—à–µ–Ω–∏–µ:")
                print(f"  –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print("  –ú–∞–∫—Å–∏–º—É–º: 4096 —Å–∏–º–≤–æ–ª–æ–≤")
            
            return False
            
        except:
            print(f"‚úó HTTP Error {response.status_code}")
            print(f"  Response: {response.text[:200]}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚úó Timeout: Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    except requests.exceptions.ConnectionError:
        print("‚úó Connection Error: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return False
    except Exception as e:
        print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def process_and_publish(news_id, force_rewrite=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å"""
    print(f"\n{'='*80}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ ID: {news_id}")
    print(f"{'='*80}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    openai_key = get_config('openai_api_key')
    tg_token = get_config('telegram_bot_token')
    tg_channel = get_config('telegram_channel_id')
    
    if not openai_key:
        print("‚úó OpenAI API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_config.py")
        return False
    
    if not tg_token:
        print("‚úó Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_config.py")
        return False
    
    if not tg_channel:
        print("‚úó Telegram Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_config.py")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
    news = get_news_by_id(news_id)
    if not news:
        print(f"‚úó –ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    news_id, title, url, news_full, news_rewritten, images_json = news
    
    print(f"\nüì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    print(f"üîó URL: {url}")
    
    if not news_full:
        print("‚úó –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
        return False
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(news_full)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if news_rewritten and not force_rewrite:
        print("\n‚äò –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
        print("   (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏)")
        rewritten_text = news_rewritten
    else:
        rewritten_text = rewrite_with_gpt(news_full, openai_key)
        if not rewritten_text:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_rewritten_news(news_id, rewritten_text)
        print("‚úì –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    
    print(f"üìù –†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(rewritten_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_paths = []
    if images_json:
        try:
            image_paths = json.loads(images_json)
            existing = [img for img in image_paths if os.path.exists(img)]
            print(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(existing)}/{len(image_paths)}")
        except:
            print("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    print(f"\n{'='*80}")
    print("–ü–†–ï–í–¨–Æ –¢–ï–ö–°–¢–ê –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:")
    print(f"{'='*80}")
    print(rewritten_text[:500])
    if len(rewritten_text) > 500:
        print(f"\n... (–≤—Å–µ–≥–æ {len(rewritten_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
    print(f"{'='*80}")
    
    # –ü—É–±–ª–∏–∫—É–µ–º –≤ Telegram
    success = publish_to_telegram(rewritten_text, tg_token, tg_channel, image_paths)
    
    if success:
        print(f"\n{'='*80}")
        print("‚úì –£–°–ü–ï–®–ù–û! –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
        print(f"{'='*80}\n")
        return True
    else:
        print(f"\n{'='*80}")
        print("‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        print(f"{'='*80}\n")
        return False

def main():
    print("=== –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram ===\n")
    
    if len(sys.argv) > 1:
        try:
            news_id = int(sys.argv[1])
            force = '--force' in sys.argv
            process_and_publish(news_id, force_rewrite=force)
        except ValueError:
            print("‚úó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python publish_news.py <ID> [--force]")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        try:
            news_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ—Å—Ç–∏: "))
            process_and_publish(news_id)
        except ValueError:
            print("‚úó ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except KeyboardInterrupt:
            print("\n\n‚äò –û—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == '__main__':
    main()

